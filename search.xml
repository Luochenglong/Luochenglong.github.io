<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基于二叉堆的优先队列实现</title>
    <url>/2020/02/06/ji-yu-er-cha-dui-de-you-xian-dui-lie-shi-xian/</url>
    <content><![CDATA[<h4 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h4><p>优先队列的实现有很多种，但通常都以堆为基础的数据结构实现，例如二叉堆、d堆、左式堆、斜堆、二项堆,斐波那契堆、pairing 堆 等 ,数据结构二叉堆能够很好地实现优先队列的基本操作。在二叉堆的数组中，每个元素都要保证大于等于另两个特定位置的元素。相应地，这些位置的元素又至少要大于等于数组中的另两个元素，以此类推。如果我们将所有元素画成一棵二叉树，将每个较大元素和两个较小的元素用边连接就可以很容易看出这种结构。</p>
<h4 id="二叉堆的表示"><a href="#二叉堆的表示" class="headerlink" title="二叉堆的表示"></a>二叉堆的表示</h4><p>二叉堆可以用完全二叉树基于数组表示，应为这样不需要指针就可以表示。在一个二叉堆中，位置 k 的结点的父结点的位置为k/2，而它的两个子结点的位置则分别为 2k 和 2k+1。而树中的上下移动可以表示为：从 a[k] 向上一层就令 k 等于 k/2，向下一层则令 k 等于 2k 或 2k+1。</p>
<h4 id="如何保证有序性？"><a href="#如何保证有序性？" class="headerlink" title="如何保证有序性？"></a>如何保证有序性？</h4><p> 每当插入一个数据或删除一个数据，有序性就可能被打破，所以堆的有序化变得很重要。</p>
<p><strong>有序化过程</strong></p>
<p><img src="https://s2.ax1x.com/2020/02/06/16Agr6.png" alt=""></p>
<p><strong>由下至上的堆有序化(上浮)</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> k <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">exch</span><span class="token punctuation">(</span>k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
            k <span class="token operator">=</span> k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<p><strong>由上至下的堆有序化(下沉)</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sink</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">&lt;=</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> N <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">less</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token function">exch</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            k <span class="token operator">=</span> j<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<p>####优先队列实现代码展示</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MaxPQ</span><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Key<span class="token operator">>></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> Key<span class="token punctuation">[</span><span class="token punctuation">]</span> pq<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">MaxPQ</span><span class="token punctuation">(</span><span class="token keyword">int</span> MaxN<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pq <span class="token operator">=</span> <span class="token punctuation">(</span>Key<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>MaxN <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> N <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> N<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">less</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>pq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">exch</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Key temp <span class="token operator">=</span> pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        pq<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 上浮
     *
     * @param k
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> k <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">exch</span><span class="token punctuation">(</span>k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
            k <span class="token operator">=</span> k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 下沉
     *
     * @param k
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sink</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">&lt;=</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> N <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">less</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token function">exch</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            k <span class="token operator">=</span> j<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Key Key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pq<span class="token punctuation">[</span><span class="token operator">++</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> Key<span class="token punctuation">;</span>
        <span class="token function">swim</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Key <span class="token function">delMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Key max <span class="token operator">=</span> pq<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">exch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pq<span class="token punctuation">[</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token function">sink</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> max<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>优先队列</tag>
        <tag>堆</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/2020/02/05/kuai-su-pai-xu/</url>
    <content><![CDATA[<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p> 快速排序可能呢是应用最广泛的排序算法，其原因是它适用于不同的输入数据且在一般应用中比其他排序算法快很多。快速排序的思想是原地排序，只需要很小的辅助栈。且时间复杂度为nlogn。大部分的排序算法很难将这两点结合起来。另外快速排序的内循环也很短小，所以在实际过程中它还要更快。快速排序是分治思想的典型例子。它的主要思路为，在数组中随便找一个轴，然后把比它大的放右边，比它小的放左边。这样整个数组就有一定的顺序了，然后重复以上步骤（轴的相对位置是固定的，便于递归)，知道整个数组都有序。</p>
<p><strong>时间复杂度：O(nlogn)</strong></p>
<h4 id="动画演示"><a href="#动画演示" class="headerlink" title="动画演示"></a>动画演示</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvODQ5NTg5LzIwMTcxMC84NDk1ODktMjAxNzEwMTUyMzA5MzYzNzEtMTQxMzUyMzQxMi5naWY" alt=""></p>
<p>​     <img src="https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif" alt=""></p>
<h4 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> leftBound<span class="token punctuation">,</span> <span class="token keyword">int</span> rightBound<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftBound <span class="token operator">>=</span> rightBound<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> leftBound<span class="token punctuation">,</span> rightBound<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> leftBound<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rightBound<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> leftBound<span class="token punctuation">,</span> <span class="token keyword">int</span> rightBound<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> leftBound<span class="token punctuation">;</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> rightBound <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> pivot <span class="token operator">=</span> rightBound<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">)</span> left<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">)</span> right<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>   <span class="token function">exch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">exch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> pivot<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> left<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h4><p> 尽管原始的快速排序已经是很高效的排序算法，但从快速排序诞生之初，许多人就已经热衷于对快速排序的改进。以使它更好的平衡性。下面有几种改进思路。实际性能以实际生产为准。</p>
<h5 id="1-切换到插入排序"><a href="#1-切换到插入排序" class="headerlink" title="1.切换到插入排序"></a>1.切换到插入排序</h5><p>很大多数递归算法一样，改进快速排序的简单方法是基于一下两点：</p>
<ul>
<li>对于小数组，快速排序必插入排序慢</li>
<li>因为递归，sort()方法在小数组中一样会调用自己。</li>
</ul>
<p>因此在小数组中，应该切换到插入排序算法中，简单的实现就是讲sort()中的：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>leftBound <span class="token operator">>=</span> rightBound<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></code></pre>
<p>改为</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>rightBound <span class="token operator">&lt;=</span> leftBound <span class="token operator">+</span> M<span class="token punctuation">)</span> <span class="token punctuation">{</span> Insertion<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> leftBound<span class="token punctuation">,</span> rightBound<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>
<p>转换参数M和系统相关，在5-15之间的任意值在大多数情况下都会令你满意。</p>
<h5 id="2-三取样切分"><a href="#2-三取样切分" class="headerlink" title="2.三取样切分"></a>2.三取样切分</h5><p>改进快速排序性能的第二个办法是使用子数组的一小部分元素的中位数来切分数组。这样做得到的切分更好，但代价是需要计算中位数。人们发现将取样大小设为 3 并用大小居中的元素切分的效果最好。我们还可以将取样元素放在数组末尾作为“哨兵”来去掉 partition() 中的数组边界测试。</p>
<h5 id="3-熵最优的排序"><a href="#3-熵最优的排序" class="headerlink" title="3.熵最优的排序"></a>3.熵最优的排序</h5><p>实际应用中经常会出现含有大量重复元素的数组 ,一个元素全部重复的子数组就不需要继续排序了，但我们的算法还会继续将它切分为更小的数组。在有大量重复元素的情况下，快速排序的递归性会使元素全部重复的子数组经常出现，这就有很大的改进潜力，将当前实现的线性对数级的性能提高到线性级别。 Dijkstra 提供了一种方法“三向切分的快速排序” </p>
<p><strong>三向切分的快速排序：</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Quick3way</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 调用此方法的公有方法sort()请见算法2.5</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hi <span class="token operator">&lt;=</span> lo<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> lt <span class="token operator">=</span> lo<span class="token punctuation">,</span> i <span class="token operator">=</span> lo<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> gt <span class="token operator">=</span> hi<span class="token punctuation">;</span>
        Comparable v <span class="token operator">=</span> a<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> gt<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> cmp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">exch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lt<span class="token operator">++</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">exch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">,</span> gt<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 现在 a[lo..lt-1] &lt; v = a[lt..gt] &lt; a[gt+1..hi]成立</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> lt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> gt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<hr>
<p><strong>以上对快速排序的改进思路与代码都出自《算法》第四版，特此感谢作者与译者，如有侵权请联系本人</strong></p>
<p>​    </p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
        <tag>排序</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/2020/02/04/gui-bing-pai-xu/</url>
    <content><![CDATA[<h4 id="什么是归并排序"><a href="#什么是归并排序" class="headerlink" title="什么是归并排序?"></a>什么是归并排序?</h4><p>归并是指将两个有序的数组归并成一个更大的有序数组，基于这种思想，便有了归并排序。归并排序的实现思路也大致分为两种，第一种是将一个大的数组递归地分成两半，并排序。然后归并到大数组中。第二种思想是首先进行两两归并（把每个元素想象成一个大小为 1 的数组），然后是四四归并（将两个大小为 2 的数组归并成一个有 4个元素的数组），然后是八八的归并，一直下去。最后一次归并及时出现一个子数组比另外一个数组大很多，也没有关系。因为我们可以在归并的时候进行处理。</p>
<ul>
<li><strong>时间复杂度：O(nlogn)</strong></li>
<li><strong>空间复杂度：O(n)</strong></li>
</ul>
<h4 id="动画演示"><a href="#动画演示" class="headerlink" title="动画演示"></a>动画演示</h4><p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=743146695,3042978389&fm=26&gp=0.jpgbp" alt=""></p>
<h4 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h4><p><strong>自顶向下的归并排序</strong></p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aux<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 归并所需的辅助数组</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 将a[lo..mid] 和 a[mid+1..hi] 归并</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> lo<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将a[lo..hi]复制到aux[lo..hi]</span>
            aux<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> lo<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 归并回到a[lo..hi]</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> mid<span class="token punctuation">)</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> hi<span class="token punctuation">)</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>aux<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>aux<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        aux <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 一次性分配空间</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 将数组a[lo..hi]排序</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hi <span class="token operator">&lt;=</span> lo<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将左半边排序</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将右半边排序</span>
        <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 归并结果</span>
    <span class="token punctuation">}</span></code></pre>
<p>​                                                                        出自《算法》第四版</p>
<p><strong>自顶向上的归并排序</strong></p>
<pre class=" language-java"><code class="language-java">   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aux<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 将a[lo..mid] 和 a[mid+1..hi] 归并</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> lo<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将a[lo..hi]复制到aux[lo..hi]</span>
            aux<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> lo<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 归并回到a[lo..hi]</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>aux<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>aux<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 进行lgN次两两归并</span>
        <span class="token keyword">int</span> N <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        aux <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> sz <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> sz <span class="token operator">=</span> sz <span class="token operator">+</span> sz<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// sz子数组大小</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> lo <span class="token operator">&lt;</span> N <span class="token operator">-</span> sz<span class="token punctuation">;</span> lo <span class="token operator">+=</span> sz <span class="token operator">+</span> sz<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// lo:子数组索引</span>
                <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> lo <span class="token operator">+</span> sz <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>lo <span class="token operator">+</span> sz <span class="token operator">+</span> sz <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>​                                                                        出自《算法》第四版</p>
<p><strong>另一种归并的思路，本质一样</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> leftPtr<span class="token punctuation">,</span> <span class="token keyword">int</span> rightPtr<span class="token punctuation">,</span> <span class="token keyword">int</span> bound<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> leftPtr<span class="token punctuation">;</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> rightPtr<span class="token punctuation">;</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> rightPtr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>bound <span class="token operator">-</span> leftPtr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> bound<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">?</span> a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> bound<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            a<span class="token punctuation">[</span>leftPtr <span class="token operator">+</span> l<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> N <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> sz <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> sz <span class="token operator">=</span> sz <span class="token operator">+</span> sz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> lo <span class="token operator">&lt;</span> N <span class="token operator">-</span> sz<span class="token punctuation">;</span> lo <span class="token operator">+=</span> sz <span class="token operator">+</span> sz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> lo <span class="token operator">+</span> sz<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>lo <span class="token operator">+</span> sz <span class="token operator">+</span> sz <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>   归并排序虽然很高效，所需的时间为NlogN，但所需要的空间也和N成正比。不在是O(1),而是O(N)。总之不同的排序算法都有与之对应的应用场景。具体使用还得看场景。在《算法》第四版中归并阶段的处理是先将原数组直接复制到一个临时数组中，然后在将数组归并到原数组中。这样做和另一种做法并无差别，本质上只是顺序不同。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
        <tag>排序</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>希尔排序</title>
    <url>/2020/02/03/xi-er-pai-xu/</url>
    <content><![CDATA[<h4 id="什么是希尔排序"><a href="#什么是希尔排序" class="headerlink" title="什么是希尔排序?"></a>什么是希尔排序?</h4><p>希尔排序的思想是使数组中任意间隔为 h 的元素都是有序的。这样的数组被称为 h 有序数组。换句话说，一个 h 有序数组就是 h 个互相独立的有序数组编织在一起组成的一个数组。在进行排序时，如果 h 很大，我们就能将元素移动到很远的地方，为实现更小的 h 有序创造方便。用这种方式，对于任意以 1 结尾的 h 序列，我们都能够将数组排序。这就是希尔排序。(此段出自算法(第四版))。也可以称为缩小增量排序。知道增量为一时，便是插入排序。因为我们知道插入排序对于有序的小规模的数组排序时很高效的，但其实这两种情况都比较少见。所以希尔排序对其进行了改进。</p>
<ul>
<li><strong>时间复杂度：平均O(n^1.3),最好为O(n),最坏为0(n ^ 2)</strong></li>
<li><strong>空间复杂度：O(1)</strong></li>
<li><strong>稳定性:不稳定</strong></li>
</ul>
<h4 id="图解演示"><a href="#图解演示" class="headerlink" title="图解演示"></a>图解演示</h4><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2864635313,3409308785&fm=26&gp=0.jpg" alt=""></p>
<h4 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> N <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">&lt;</span> N <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            h <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>h <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">>=</span> h <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>j<span class="token operator">-</span>h<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">exch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">-</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//exch交换方法</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            h <span class="token operator">=</span> h <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<h4 id="关于希尔增量的取法？"><a href="#关于希尔增量的取法？" class="headerlink" title="关于希尔增量的取法？"></a>关于希尔增量的取法？</h4><p>关于增量有很多取法，起初希尔提出n/2向下取整，直到取到1为止。但由于直到最后一步，在奇数位置的元素才会与偶数位置的元素进行比较，这样使用这个序列的效率会很低。后来Knuth提出取n/3向下取整+1.还有人提出都取奇数为好，也有人提出增量互质为好。应用不同的序列会使希尔排序算法的性能有很大的差异。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找算法</title>
    <url>/2020/02/02/er-fen-cha-zhao-suan-fa/</url>
    <content><![CDATA[<h4 id="什么是二分查找算法"><a href="#什么是二分查找算法" class="headerlink" title="什么是二分查找算法?"></a>什么是二分查找算法?</h4><p>   二分查找(binary search)算法,又称折半搜搜索，在某一个有序数组中查找特定元素的搜索算法，搜索过程从中间开始，如果中间的元素恰好等于指定元素，就表示找到了，如果中间元素大于或小于指定元素，则将搜索空间折半，重复以上操作，如果某一步骤进行时数组以空，则表示没找到。</p>
<ul>
<li><p><strong>时间复杂度：O(logn)</strong></p>
</li>
<li><p><strong>空间复杂度：O(1),尾递归，可改为循环</strong>。</p>
</li>
</ul>
<h4 id="图像演示"><a href="#图像演示" class="headerlink" title="图像演示"></a>图像演示</h4><p><img src="https://images.morethink.cn/binary-search.gif" alt=""></p>
<h4 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h4><h5 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binary</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> end <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h5 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binary</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> mid<span class="token operator">=</span>start<span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">binary</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>start<span class="token punctuation">,</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">binary</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h4 id="中值的计算"><a href="#中值的计算" class="headerlink" title="中值的计算"></a>中值的计算</h4><pre class=" language-java"><code class="language-java">mid<span class="token operator">=</span><span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span></code></pre>
<pre class=" language-java"><code class="language-java">mid<span class="token operator">=</span>start<span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span></code></pre>
<p>这两种计算结果是一样的，但在java中第一种处理方式更有可能出现溢出bug，start+end很大时。就会得到错误的中值。但是第二种处理使得mid一定小于end，大于start。不存在溢出风险。</p>
<h4 id="二分查找法的缺陷"><a href="#二分查找法的缺陷" class="headerlink" title="二分查找法的缺陷"></a>二分查找法的缺陷</h4><p>二分查找法在时间复杂度上还算高效，但也存在明显的缺陷，就是数组必须有序，虽然使用java的工具类给数组排序十分方便，但在时空复杂度上就有一定的花费。并且查找也只能是数组。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>使用cAdvisor+Influxdb+Grafana监控系统</title>
    <url>/2020/01/31/shi-yong-cadvisor-influxdb-grafana-jian-kong-xi-tong/</url>
    <content><![CDATA[<h3 id="1-Influxdb"><a href="#1-Influxdb" class="headerlink" title="1.Influxdb"></a>1.Influxdb</h3><h4 id="1-1什么是Influxdb？"><a href="#1-1什么是Influxdb？" class="headerlink" title="1.1什么是Influxdb？"></a>1.1什么是Influxdb？</h4><p>influxdb是一个分布式时间序列数据库，cAdvisor仅仅是实时采集数据，但是不存储监控数据，所以我么需要用cAdvisor组件提供数据用于时序数据库influxdb存储</p>
<h4 id="1-2Influxdb的安装"><a href="#1-2Influxdb的安装" class="headerlink" title="1.2Influxdb的安装"></a>1.2Influxdb的安装</h4><p>(1)下载镜像</p>
<pre class=" language-docker"><code class="language-docker">docker pull tutum/influxdb</code></pre>
<p>(2)创建容器</p>
<pre class=" language-docker"><code class="language-docker">docker run <span class="token punctuation">-</span>di \
<span class="token punctuation">-</span>p 8083<span class="token punctuation">:</span>8083 \
<span class="token punctuation">-</span>p 8086<span class="token punctuation">:</span>8086 \
<span class="token punctuation">-</span><span class="token punctuation">-</span>expose 8090 \
<span class="token punctuation">-</span><span class="token punctuation">-</span>expose 8099 \
<span class="token punctuation">-</span><span class="token punctuation">-</span>name influxsrv \
tutum/influxdb</code></pre>
<p>端口概述： 8083端口:web访问端口 8086:</p>
<p>打开浏览器 <a href="http://XXXX:8083/" target="_blank" rel="noopener">http://XXXX:8083/</a> </p>
<h4 id="1-3influxdb的常用操作"><a href="#1-3influxdb的常用操作" class="headerlink" title="1.3influxdb的常用操作"></a>1.3influxdb的常用操作</h4><p>基本操作最好使用模板 ，以免敲错</p>
<h5 id="1-3-1创建数据库"><a href="#1-3-1创建数据库" class="headerlink" title="1.3.1创建数据库"></a>1.3.1创建数据库</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token string">"cadvisor"</span></code></pre>
<p>回车创建数据库</p>
<pre><code>SHOW DATABASES</code></pre><p>查看数据库</p>
<h5 id="1-3-2创建用户并授权"><a href="#1-3-2创建用户并授权" class="headerlink" title="1.3.2创建用户并授权"></a>1.3.2创建用户并授权</h5><p>创建admin用户</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">"cadvisor"</span> <span class="token keyword">WITH</span> PASSWORD <span class="token string">'cadvisor'</span> <span class="token keyword">WITH</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span></code></pre>
<p>查看用户</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> USERS</code></pre>
<p>用户授权</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> cadvisor <span class="token keyword">to</span> cadvisor
<span class="token keyword">grant</span> <span class="token keyword">WRITE</span> <span class="token keyword">on</span> cadvisor <span class="token keyword">to</span> cadvisor
<span class="token keyword">grant</span> <span class="token keyword">READ</span> <span class="token keyword">on</span> cadvisor <span class="token keyword">to</span> cadvisor</code></pre>
<h5 id="1-3-3查看采集数据"><a href="#1-3-3查看采集数据" class="headerlink" title="1.3.3查看采集数据"></a>1.3.3查看采集数据</h5><p>切换到cadvsior数据库</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> MEASUREMENTS</code></pre>
<p>因为还没有使用cAdvisor，所以没有数据</p>
<h3 id="2-cAdvisor"><a href="#2-cAdvisor" class="headerlink" title="2.cAdvisor"></a>2.cAdvisor</h3><h4 id="2-1什么是cAdvisor？"><a href="#2-1什么是cAdvisor？" class="headerlink" title="2.1什么是cAdvisor？"></a>2.1什么是cAdvisor？</h4><p>Google开源的用于监控基础设施应用的工具,它是一个强大的监控工具,不需要任何配置就可以通过运行在Docker主机上的容器来监控Docker容器，而且可以监控Docker主机.更多详细操作和配置选项可以查看Github上的cAdvisor项目文档</p>
<h4 id="2-2cAdvisor的安装"><a href="#2-2cAdvisor的安装" class="headerlink" title="2.2cAdvisor的安装"></a>2.2cAdvisor的安装</h4><p>(1)下载镜像</p>
<pre class=" language-docker"><code class="language-docker">docker pull docker pull google/cadvisor</code></pre>
<p>(2)创建容器</p>
<pre class=" language-docker"><code class="language-docker">sudo docker run \
  <span class="token punctuation">-</span><span class="token punctuation">-</span>volume=/<span class="token punctuation">:</span>/rootfs<span class="token punctuation">:</span>ro \
  <span class="token punctuation">-</span><span class="token punctuation">-</span>volume=/var/run<span class="token punctuation">:</span>/var/run<span class="token punctuation">:</span>rw \
  <span class="token punctuation">-</span><span class="token punctuation">-</span>volume=/sys<span class="token punctuation">:</span>/sys<span class="token punctuation">:</span>ro \
  <span class="token punctuation">-</span><span class="token punctuation">-</span>volume=/var/lib/docker/<span class="token punctuation">:</span>/var/lib/docker<span class="token punctuation">:</span>ro \
  <span class="token punctuation">-</span><span class="token punctuation">-</span>volume=/dev/disk/<span class="token punctuation">:</span>/dev/disk<span class="token punctuation">:</span>ro \
  <span class="token punctuation">-</span><span class="token punctuation">-</span>publish=8080<span class="token punctuation">:</span>8080 \
  <span class="token punctuation">-</span><span class="token punctuation">-</span>detach=true \
  <span class="token punctuation">-</span><span class="token punctuation">-</span>name=cadvisor \
  <span class="token punctuation">-</span><span class="token punctuation">-</span>privileged=true \
  google/cadvisor<span class="token punctuation">:</span>latest \
  <span class="token punctuation">-</span>storage_driver=influxdb \
  <span class="token punctuation">-</span>storage_driver_db=cadvisor \
  <span class="token punctuation">-</span>storage_driver_user=xxxx \
  <span class="token punctuation">-</span>storage_driver_password=xxxx \
  <span class="token punctuation">-</span>storage_driver_host=xxxx<span class="token punctuation">:</span>8086 </code></pre>
<p>WEB前端访问地址:<a href="http://XXXX:8080/containers/" target="_blank" rel="noopener">http://XXXX:8080/containers/</a></p>
<p>在此查看influxdb 发现已经有数据，表示成功，否则则需检查docker命令是否关联正确</p>
<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1580628925094&di=a7d4a32c6ef46ba8a727a023c1ede415&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180713%2Fbfdb6995942b4f1487ec0b7f3c6c19db.jpeg" alt=""></p>
<h3 id="3-Grafana"><a href="#3-Grafana" class="headerlink" title="3.Grafana"></a>3.Grafana</h3><h4 id="3-1什么是Grafana"><a href="#3-1什么是Grafana" class="headerlink" title="3.1什么是Grafana"></a>3.1什么是Grafana</h4><p>Grafana是一个可视化面板（Dashboard），有着非常漂亮的图表和布局展示，功能齐全的度量仪表盘和图形编辑器。支持Graphite、zabbix、InfluxDB、Prometheus和OpenTSDB作为数据源。Grafana主要特性：灵活丰富的图形化选项；可以混合多种风格；支持白天和夜间模式；多个数据源。</p>
<h4 id="3-2-Grafana的安装"><a href="#3-2-Grafana的安装" class="headerlink" title="3.2 Grafana的安装"></a>3.2 Grafana的安装</h4><p>(1)下载镜像</p>
<pre class=" language-docker"><code class="language-docker">docker pull grafana/grafana</code></pre>
<p>(2)创建容器</p>
<pre class=" language-docker"><code class="language-docker">docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 3001<span class="token punctuation">:</span>3000 <span class="token punctuation">-</span>e INFLUXDB_HOST=influxsrv <span class="token punctuation">-</span>e
INFLUXDB_PORT=8086 <span class="token punctuation">-</span>e INFLUXDB_NAME=cadvisor <span class="token punctuation">-</span>e INFLUXDB_USER=cadvisor <span class="token punctuation">-</span>e
INFLUXDB_PASS=cadvisor <span class="token punctuation">-</span><span class="token punctuation">-</span>link influxsrv<span class="token punctuation">:</span>influxsrv <span class="token punctuation">-</span><span class="token punctuation">-</span>name grafana grafana/grafana</code></pre>
<p>(3)访问</p>
<p>地址:<a href="http://XXXX:3001" target="_blank" rel="noopener">http://XXXX:3001</a> </p>
<h4 id="3-3-Grafana的使用"><a href="#3-3-Grafana的使用" class="headerlink" title="3.3 Grafana的使用"></a>3.3 Grafana的使用</h4><p>1.用户名和密码都是admin，初次需要修改密码</p>
<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1580628855406&di=8942b4cb8b97bb4d10d1c8bda886290d&imgtype=0&src=http%3A%2F%2Fimg.dongcoder.com%2Fup%2Finfo%2F201803%2F20180329230703837911.png" alt=""></p>
<p>2.将Influxdb数据源添加入Grafana。 </p>
<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1580628811711&di=0cec2b26c4492b856538fb756ed914da&imgtype=jpg&src=http%3A%2F%2Fimg3.imgtn.bdimg.com%2Fit%2Fu%3D3793853198%2C3439546584%26fm%3D214%26gp%3D0.jpg" alt=""></p>
<p>3.添加仪表盘</p>
<p>​     (1)选择Dashboards –Manager           </p>
<p>​     (2)点击“添加”按钮 </p>
<p>​     (3)点击Graph 图标 </p>
<p>​         (4)出现下面图表的界面 ，点击Panel Title 选择Edit (编辑) </p>
<p>​     (5)定义标题等基础信息 </p>
<p>​    (6)设置查询的信息为内存，指定容器名称 </p>
<p>​    (7)指定y轴的单位 为M </p>
<p>​    (8)保存</p>
<p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=3637038230,3047050570&fm=26&gp=0.jpg" alt=""></p>
<h4 id="3-4其他使用"><a href="#3-4其他使用" class="headerlink" title="3.4其他使用"></a>3.4其他使用</h4><p>Grafana 还有一些功能，比如设置预警线，实现容器的自动扩容与缩容</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>数据监控</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>雪花算法</title>
    <url>/2020/01/14/xue-hua-suan-fa/</url>
    <content><![CDATA[<p>由于我们的数据库在生产环境中要分片部署（MyCat）,所以我们不能使用数据库本身的自增功能来产生主键值，只能由程序来生成唯一的主键值。twitter推特 的开源的snowflake （雪花）算法是当下流行的解决此问题的方法。</p>
<p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=681512304,4245708660&fm=11&gp=0.jpg" alt="结构图">  </p>
<p>snowflake的结构如下(每部分用-分开):<br>0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000<br>第一位为未使用，接下来的41位为毫秒级时间(41位的长度可以使用69年)，然后是5位datacenterId和5位workerId(10位的长度最多支持部署1024个节点） ，最后12位是毫秒内的计数（12位的计数顺序号支持每个节点每毫秒产生4096个ID序号）<br>一共加起来刚好64位，为一个Long型。(转换成字符串后长度最多19)<br>snowflake生成的ID整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞（由datacenter和workerId作区分），并且效率较高。经测试snowflake每秒能够产生26万个ID</p>
<p>保证每个机器的workerId和datacenterId不同，比如你有3台服务器，那么这3台服务器的配置分别设置为0,1,2 就行了<br>需要指定数据中心标识ID和机器进程标识ID</p>
<p>问题：<br>系统时钟回退</p>
<p>解决：<br>记录 lasttime 并入库，回退期间使用12位序列自增的方式生成id，序列满后，lasttime 自增（计入内存并入库）且序列归0，开始下一轮的序列自增<br>数据库压力：<br>（因为单个应用是线程安全的同步操作不会出现并发）多应用同时出现时钟回退且大量并发请求会有大量的入库操作，<br>1，减少机器节点位数（workerId、datacenterId）增加序列节点到14位，序列可达到16000，减少lasttime的入库频率，<br>2，出现时钟回退报警</p>
<p>10110001000111101000111001111011101111100 当前毫秒数 1970.1.1<br>1011110011100000010011011101101111100 减去20150101后的毫秒数<br>10111100111000000100110111011011111001111100001000000000000</p>
<p>2的62次方 4611686018427387904 100000000000000000000000000000000000000000000000000000000000000 63位<br>2的63次方-9223372036854775808 111111111111111111111111111111111111111111111111111111111111111 63位 减1 9223372036854775807</p>
<p>二进制11能标示4个数，但它是从0开始的，所以二进制11代表的是十进制的3，就是2的2次方减1<br>111111111111111111111111111111111111111111111111111111111111111，能表示9223372036854775808个数，对应十进制（减1）9223372036854775807，是Long的最大值<br>为什么2的63次方是负数：</p>
<p>最大值：Long.MAX_VALUE=9223372036854775807 （2的63次方-1）<br>最小值：Long.MIN_VALUE=-9223372036854775808 （-2的63次方）<br>数据用原码表示：<br>0：00000000,00000000,00000000,00000000<br>8：00000000,00000000,00000000,00001000<br>Java没有无符号整数，如果想表示负数呢？<br>可以让第一个数字代表符号位，0是正数，1是负数，<br>表示的范围是-2^16+1<del>-0和+0</del>2^16-1。<br>这导致了有+0和-0两种0。<br>+8：00000000,00000000,00000000,00001000<br>-8：10000000,00000000,00000000,00001000<br>+0：00000000,00000000,00000000,00000000<br>-0：10000000,00000000,00000000,00000000</p>
<p>^ 异或运算<br>&amp; 按位与,转化为二进制数  两侧的值都为真，结果才为真（二进制11111的十进制为31 11&amp;31结果还未11，只要比31小，与的结果还为其本身）<br>  31&amp;0 31&amp;32 64 96 128 都为0<br>| 或运算，一个为真就为真（一个为1就为1），111（7）|110000（48）得110111（十进制55）<br>  如果第一个条件为true，会接着判断第二个条件，和||不同</p>
<p>UUID 组成：<br>    UUID保证对在同一时空中的所有机器都是唯一的。通常平台会提供生成的API。按照开放软件基金会(OSF)制定的标准计算，用到了以太网卡地址、纳秒级时间、芯片ID码和许多可能的数字<br>UUID由以下几部分的组合：<br>（1）当前日期和时间，UUID的第一个部分与时间有关，如果你在生成一个UUID之后，过几秒又生成一个UUID，则第一个部分不同，其余相同。<br>（2）时钟序列。<br>（3）全局唯一的IEEE机器识别号，如果有网卡，从网卡MAC地址获得，没有网卡以其他方式获得。<br>UUID的唯一缺陷在于生成的结果串会比较长。关于UUID这个标准使用最普遍的是微软的GUID(Globals Unique Identifiers)。在ColdFusion中可以用CreateUUID()函数很简单地生成UUID。</p>
<p>源码</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>management<span class="token punctuation">.</span>ManagementFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetAddress<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>NetworkInterface<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>名称：IdWorker.java&lt;/p>
 * &lt;p>描述：分布式自增长ID&lt;/p>
 * &lt;pre>
 *     Twitter的 Snowflake　JAVA实现方案
 * &lt;/pre>
 * 核心代码为其IdWorker这个类实现，其原理结构如下，我分别用一个0表示一位，用—分割开部分的作用：
 * 1||0---0000000000 0000000000 0000000000 0000000000 0 --- 00000 ---00000 ---000000000000
 * 在上面的字符串中，第一位为未使用（实际上也可作为long的符号位），接下来的41位为毫秒级时间，
 * 然后5位datacenter标识位，5位机器ID（并不算标识符，实际是为线程标识），
 * 然后12位该毫秒内的当前毫秒内的计数，加起来刚好64位，为一个Long型。
 * 这样的好处是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞（由datacenter和机器ID作区分），
 * 并且效率较高，经测试，snowflake每秒能够产生26万ID左右，完全满足需要。
 * &lt;p>
 * 64位ID (42(毫秒)+5(机器ID)+5(业务编码)+12(重复累加))
 *
 * @author Polim
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdWorker</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 时间起始标记点，作为基准，一般取系统的最近时间（一旦确定不能变动）</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> twepoch <span class="token operator">=</span> 1288834974657L<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 机器标识位数</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> workerIdBits <span class="token operator">=</span> 5L<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 数据中心标识位数</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> datacenterIdBits <span class="token operator">=</span> 5L<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 机器ID最大值</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> maxWorkerId <span class="token operator">=</span> <span class="token operator">-</span>1L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span>1L <span class="token operator">&lt;&lt;</span> workerIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 数据中心ID最大值</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> maxDatacenterId <span class="token operator">=</span> <span class="token operator">-</span>1L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span>1L <span class="token operator">&lt;&lt;</span> datacenterIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 毫秒内自增位</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> sequenceBits <span class="token operator">=</span> 12L<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 机器ID偏左移12位</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> workerIdShift <span class="token operator">=</span> sequenceBits<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 数据中心ID左移17位</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> datacenterIdShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 时间毫秒左移22位</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> timestampLeftShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits <span class="token operator">+</span> datacenterIdBits<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> sequenceMask <span class="token operator">=</span> <span class="token operator">-</span>1L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span>1L <span class="token operator">&lt;&lt;</span> sequenceBits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 上次生产id时间戳 */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> lastTimestamp <span class="token operator">=</span> <span class="token operator">-</span>1L<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 0，并发控制</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> sequence <span class="token operator">=</span> 0L<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> workerId<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 数据标识id部分</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">IdWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>datacenterId <span class="token operator">=</span> <span class="token function">getDatacenterId</span><span class="token punctuation">(</span>maxDatacenterId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>workerId <span class="token operator">=</span> <span class="token function">getMaxWorkerId</span><span class="token punctuation">(</span>datacenterId<span class="token punctuation">,</span> maxWorkerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/**
     * @param workerId
     *            工作机器ID
     * @param datacenterId
     *            序列号
     */</span>
    <span class="token keyword">public</span> <span class="token function">IdWorker</span><span class="token punctuation">(</span><span class="token keyword">long</span> workerId<span class="token punctuation">,</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>workerId <span class="token operator">></span> maxWorkerId <span class="token operator">||</span> workerId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"worker Id can't be greater than %d or less than 0"</span><span class="token punctuation">,</span> maxWorkerId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>datacenterId <span class="token operator">></span> maxDatacenterId <span class="token operator">||</span> datacenterId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"datacenter Id can't be greater than %d or less than 0"</span><span class="token punctuation">,</span> maxDatacenterId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>workerId <span class="token operator">=</span> workerId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>datacenterId <span class="token operator">=</span> datacenterId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/**
     * 获取下一个ID
     *
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span><span class="token punctuation">,</span> lastTimestamp <span class="token operator">-</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTimestamp <span class="token operator">==</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 当前毫秒内，则+1</span>
            sequence <span class="token operator">=</span> <span class="token punctuation">(</span>sequence <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> sequenceMask<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 当前毫秒内计数满了，则等待下一秒</span>
                timestamp <span class="token operator">=</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span>lastTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            sequence <span class="token operator">=</span> 0L<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        lastTimestamp <span class="token operator">=</span> timestamp<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// ID偏移组合生成最终的ID，并返回ID</span>
        <span class="token keyword">long</span> nextId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>timestamp <span class="token operator">-</span> twepoch<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> timestampLeftShift<span class="token punctuation">)</span>
                <span class="token operator">|</span> <span class="token punctuation">(</span>datacenterId <span class="token operator">&lt;&lt;</span> datacenterIdShift<span class="token punctuation">)</span>
                <span class="token operator">|</span> <span class="token punctuation">(</span>workerId <span class="token operator">&lt;&lt;</span> workerIdShift<span class="token punctuation">)</span> <span class="token operator">|</span> sequence<span class="token punctuation">;</span>

        <span class="token keyword">return</span> nextId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;=</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            timestamp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> timestamp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>
     * 获取 maxWorkerId
     * &lt;/p>
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getMaxWorkerId</span><span class="token punctuation">(</span><span class="token keyword">long</span> datacenterId<span class="token punctuation">,</span> <span class="token keyword">long</span> maxWorkerId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        StringBuffer mpid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mpid<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>datacenterId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        String name <span class="token operator">=</span> ManagementFactory<span class="token punctuation">.</span><span class="token function">getRuntimeMXBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment" spellcheck="true">/*
          * GET jvmPid
          */</span>
            mpid<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"@"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token comment" spellcheck="true">/*
       * MAC + PID 的 hashcode 获取16个低位
       */</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>mpid<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>maxWorkerId <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>
     * 数据标识id部分
     * &lt;/p>
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getDatacenterId</span><span class="token punctuation">(</span><span class="token keyword">long</span> maxDatacenterId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> id <span class="token operator">=</span> 0L<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            InetAddress ip <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            NetworkInterface network <span class="token operator">=</span> NetworkInterface<span class="token punctuation">.</span><span class="token function">getByInetAddress</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>network <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                id <span class="token operator">=</span> 1L<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mac <span class="token operator">=</span> network<span class="token punctuation">.</span><span class="token function">getHardwareAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x000000FF</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> mac<span class="token punctuation">[</span>mac<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                        <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0x0000FF00</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> mac<span class="token punctuation">[</span>mac<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">6</span><span class="token punctuation">;</span>
                id <span class="token operator">=</span> id <span class="token operator">%</span> <span class="token punctuation">(</span>maxDatacenterId <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" getDatacenterId: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>分布式</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo快速开始</title>
    <url>/2020/01/14/dubbo-kuai-su-kai-shi/</url>
    <content><![CDATA[<h3 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h3><p>Dubbo 采用全 Spring 配置方式，透明化接入应用，对应用没有任何 API 侵入，只需用 Spring 加载 Dubbo 的配置即可，Dubbo 基于 <a href="https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/xsd-configuration.html" target="_blank" rel="noopener">Spring 的 Schema 扩展</a> 进行加载。</p>
<p>如果不想使用 Spring 配置，可以通过 <a href="http://dubbo.apache.org/zh-cn/docs/user/configuration/api.html" target="_blank" rel="noopener">API 的方式</a> 进行调用。</p>
<h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><p>安装:</p>
<pre><code>git clone https://github.com/apache/dubbo.git
cd dubbo/dubbo-demo/dubbo-demo-xml
运行 dubbo-demo-xml-provider中的org.apache.dubbo.demo.provider.Application
如果使用Intellij Idea 请加上-Djava.net.preferIPv4Stack=true</code></pre><p>配置:</p>
<pre><code>resources/spring/dubbo-provider.xml
修改其中的dubbo:registry，替换成真实的注册中心地址，推荐使用zookeeper，如：
&lt;dubbo:registry address=&quot;zookeeper://127.0.0.1:2181&quot;/&gt;</code></pre><h4 id="定义服务接口"><a href="#定义服务接口" class="headerlink" title="定义服务接口"></a>定义服务接口</h4><p> DemoService.java:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>demo<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DemoService</span> <span class="token punctuation">{</span>
    String <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>该接口需单独打包，在服务提供方和消费方共享</p>
<h4 id="在服务提供方实现接口"><a href="#在服务提供方实现接口" class="headerlink" title="在服务提供方实现接口"></a>在服务提供方实现接口</h4><p>DemoServiceImpl.java:</p>
<pre class=" language-java"><code class="language-java">
<span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>provider<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>DemoService<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DemoService</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>对服务消费方隐藏实现 </p>
<h4 id="用Spring配置声明暴露服务"><a href="#用Spring配置声明暴露服务" class="headerlink" title="用Spring配置声明暴露服务"></a>用Spring配置声明暴露服务</h4><p>provider.xml:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>dubbo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://dubbo.apache.org/schema/dubbo<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 提供方应用信息，用于计算依赖关系 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello-world-app<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 使用multicast广播注册中心暴露服务地址 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>registry</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multicast://224.5.6.7:1234<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 用dubbo协议在20880端口暴露服务 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dubbo<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20880<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 声明需要暴露的服务接口 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.dubbo.demo.DemoService<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demoService<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 和本地bean一样实现服务 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demoService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.dubbo.demo.provider.DemoServiceImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>
<h4 id="加载Spring配置"><a href="#加载Spring配置" class="headerlink" title="加载Spring配置"></a>加载Spring配置</h4><p>Provider.java:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Provider</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        ClassPathXmlApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"http://10.20.160.198/wiki/display/dubbo/provider.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 按任意键退出</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h3><p>安装:</p>
<pre><code>git clone https://github.com/apache/dubbo.git
cd dubbo/dubbo-demo/dubbo-demo-xml
运行 dubbo-demo-xml-consumer中的org.apache.dubbo.demo.consumer.Application
请确保先启动Provider
如果使用Intellij Idea 请加上-Djava.net.preferIPv4Stack=true</code></pre><p>配置:</p>
<pre><code>resources/spring/dubbo-consumer.xml
修改其中的dubbo:registry，替换成Provider提供的注册中心地址, 如：
&lt;dubbo:registry address=&quot;zookeeper://127.0.0.1:2181&quot;/&gt;</code></pre><h4 id="通过Spring配置引用远程服务"><a href="#通过Spring配置引用远程服务" class="headerlink" title="通过Spring配置引用远程服务"></a>通过Spring配置引用远程服务</h4><p>consumer.xml:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>dubbo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://dubbo.apache.org/schema/dubbo<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>consumer-of-helloworld-app<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 使用multicast广播注册中心暴露发现服务地址 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>registry</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multicast://224.5.6.7:1234<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demoService<span class="token punctuation">"</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.dubbo.demo.DemoService<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>
<h4 id="加载Spring配置，并调用远程服务"><a href="#加载Spring配置，并调用远程服务" class="headerlink" title="加载Spring配置，并调用远程服务"></a>加载Spring配置，并调用远程服务</h4><p>Consumer.java:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>DemoService<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        ClassPathXmlApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"http://10.20.160.198/wiki/display/dubbo/consumer.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DemoService demoService <span class="token operator">=</span> <span class="token punctuation">(</span>DemoService<span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"demoService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取远程服务代理</span>
        String hello <span class="token operator">=</span> demoService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行远程方法</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> hello <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 显示调用结果</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>也可以使用 IoC 注入 </p>
]]></content>
      <categories>
        <category>Dubbo</category>
      </categories>
      <tags>
        <tag>Dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈RPC</title>
    <url>/2020/01/14/qian-tan-rpc/</url>
    <content><![CDATA[<h3 id="什么是RPC？"><a href="#什么是RPC？" class="headerlink" title="什么是RPC？"></a>什么是RPC？</h3><p>RPC（Remote Procedure Call）—远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。</p>
<p>RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。现在业界有很多开源的优秀 RPC 框架，例如 Spring Cloud、Dubbo、Thrift 等。</p>
<h3 id="RPC起源"><a href="#RPC起源" class="headerlink" title="RPC起源"></a>RPC起源</h3><p>RPC 这个概念术语在上世纪 80 年代由 <strong>Bruce Jay Nelson</strong> 提出。这里我们追溯下当初开发 RPC 的原动机是什么？在 Nelson 的论文 “Implementing Remote Procedure Calls” 中他提到了几点：</p>
<ul>
<li>简单：RPC 概念的语义十分清晰和简单，这样建立分布式计算就更容易。</li>
<li>高效：过程调用看起来十分简单而且高效。</li>
<li>通用：在单机计算中过程往往是不同算法部分间最重要的通信机制。</li>
</ul>
<p>通俗一点说，就是一般程序员对于本地的过程调用很熟悉，那么我们把 RPC 作成和本地调用完全类似，那么就更容易被接受，使用起来毫无障碍。Nelson 的论文发表于 30 年前，其观点今天看来确实高瞻远瞩，今天我们使用的 RPC 框架基本就是按这个目标来实现的。</p>
<h3 id="RPC结构"><a href="#RPC结构" class="headerlink" title="RPC结构"></a>RPC结构</h3><p>Nelson 的论文中指出实现 RPC 的程序包括 5 个部分：</p>
<ol>
<li><p>User</p>
</li>
<li><p>User-stub</p>
</li>
<li><p>RPCRuntime</p>
</li>
<li><p>Server-stub</p>
</li>
<li><p>Server</p>
<p><img src="http://dubbo.apache.org/img/blog/rpc/rpc-structure-1.png" alt="RPC结构"> </p>
</li>
</ol>
<p>这里 user 就是 client 端，当 user 想发起一个远程调用时，它实际是通过本地调用 user-stub。user-stub 负责将调用的接口、方法和参数通过约定的协议规范进行编码并通过本地的 RPCRuntime 实例传输到远端的实例。远端 RPCRuntime 实例收到请求后交给 server-stub 进行解码后发起本地端调用，调用结果再返回给 user 端。</p>
<p>以上是粗粒度的 RPC 实现概念结构，接下来我们进一步细化它应该由哪些组件构成，如下图所示。</p>
<p><img src="http://dubbo.apache.org/img/blog/rpc/rpc-structure-2.png" alt="RPC 结构拆解"> </p>
<p>RPC 服务方通过 RpcServer 去导出（export）远程接口方法，而客户方通过 RpcClient 去引入（import）远程接口方法。客户方像调用本地方法一样去调用远程接口方法，RPC 框架提供接口的代理实现，实际的调用将委托给代理RpcProxy 。代理封装调用信息并将调用转交给RpcInvoker 去实际执行。在客户端的RpcInvoker 通过连接器RpcConnector 去维持与服务端的通道RpcChannel，并使用RpcProtocol 执行协议编码（encode）并将编码后的请求消息通过通道发送给服务方。</p>
<p>RPC 服务端接收器 RpcAcceptor 接收客户端的调用请求，同样使用RpcProtocol 执行协议解码（decode）。解码后的调用信息传递给RpcProcessor 去控制处理调用过程，最后再委托调用给RpcInvoker 去实际执行并返回调用结果。如下是各个部分的详细职责：</p>
<pre><code>1. RpcServer  

   负责导出（export）远程接口  

2. RpcClient  

   负责导入（import）远程接口的代理实现  

3. RpcProxy  

   远程接口的代理实现  

4. RpcInvoker  

   客户方实现：负责编码调用信息和发送调用请求到服务方并等待调用结果返回  

   服务方实现：负责调用服务端接口的具体实现并返回调用结果  

5. RpcProtocol  

   负责协议编/解码  

6. RpcConnector  

   负责维持客户方和服务方的连接通道和发送数据到服务方  

7. RpcAcceptor  

   负责接收客户方请求并返回请求结果  

8. RpcProcessor  

   负责在服务方控制调用过程，包括管理调用线程池、超时时间等  

9. RpcChannel  

   数据传输通道 </code></pre><h3 id="RPC工作原理"><a href="#RPC工作原理" class="headerlink" title="RPC工作原理"></a>RPC工作原理</h3><p>RPC的设计由Client，Client stub，Network ，Server stub，Server构成。 其中Client就是用来调用服务的，Cient stub是用来把调用的方法和参数序列化的（因为要在网络中传输，必须要把对象转变成字节），Network用来传输这些信息到Server stub， Server stub用来把这些信息反序列化的，Server就是服务的提供者，最终调用的就是Server提供的方法。 </p>
<p><img src="http://dubbo.apache.org/img/blog/rpc/rpc-work-principle.png" alt="RPC工作原理"> </p>
<ol>
<li>Client像调用本地服务似的调用远程服务；</li>
<li>Client stub接收到调用后，将方法、参数序列化</li>
<li>客户端通过sockets将消息发送到服务端</li>
<li>Server stub 收到消息后进行解码（将消息对象反序列化）</li>
<li>Server stub 根据解码结果调用本地的服务</li>
<li>本地服务执行(对于服务端来说是本地执行)并将结果返回给Server stub</li>
<li>Server stub将返回结果打包成消息（将结果消息对象序列化）</li>
<li>服务端通过sockets将消息发送到客户端</li>
<li>Client stub接收到结果消息，并进行解码（将结果消息反序列化）</li>
<li>客户端得到最终结果。</li>
</ol>
<p>RPC 调用分以下两种：</p>
<ol>
<li>同步调用：客户方等待调用执行完成并返回结果。</li>
<li>异步调用：客户方调用后不用等待执行结果返回，但依然可以通过回调通知等方式获取返回结果。若客户方不关心调用返回结果，则变成单向异步调用，单向调用不用返回结果。</li>
</ol>
<p>异步和同步的区分在于是否等待服务端执行完成并返回结果。</p>
<h3 id="RPC能干什么？"><a href="#RPC能干什么？" class="headerlink" title="RPC能干什么？"></a>RPC能干什么？</h3><p>RPC 的主要功能目标是让构建分布式计算（应用）更容易，在提供强大的远程调用能力时不损失本地调用的语义简洁性。为实现该目标，RPC 框架需提供一种透明调用机制，让使用者不必显式的区分本地调用和远程调用，在之前给出的一种实现结构，基于 stub 的结构来实现。下面我们将具体细化 stub 结构的实现。</p>
<ul>
<li>可以做到分布式，现代化的微服务</li>
<li>部署灵活</li>
<li>解耦服务</li>
<li>扩展性强</li>
</ul>
<p>RPC的目的是让你在本地调用远程的方法，而对你来说这个调用是透明的，你并不知道这个调用的方法是部署哪里。通过RPC能解耦服务，这才是使用RPC的真正目的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>RPC并不难，难的是高性能高可靠的RPC框架。</p>
]]></content>
      <categories>
        <category>RPC</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>RPC</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo入门之原理浅析</title>
    <url>/2020/01/14/dubbo-ru-men-zhi-yuan-li-qian-xi/</url>
    <content><![CDATA[<h5 id="一、什么是dubbo"><a href="#一、什么是dubbo" class="headerlink" title="一、什么是dubbo"></a>一、什么是dubbo</h5><p>  dubbo是Alibaba开源的分布式服务框架，它最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或者最大限度地松耦合）。从服务模型的角度来看，Dubbo采用一种非常简单的模型，要么是服务提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出服务提供方（Provider）和服务消费2方（Consumer）两个角色。关于注册中心、协议支持和服务监控等内容。Webservice也是一种服务框架，但是Webservice并不是分布式的服务框架，他需要结合F5实现负载均衡。因此，dubbo除了可以提供服务之外，还可以实现软负载均衡。它还提供了两个功能Monitor监控中心和调用中心。还两个是可选的，需要单独配置。</p>
<p>Dubbo是阿里巴巴SOA治理方案的核心框架，致力于提供高性能和透明化的RPC远程服务屌用方案，以及SOA服务治理方案。其核心部分包含：</p>
<ul>
<li><strong>远程通讯</strong> <strong>:</strong>提供对多种基于长连接的NIO框架抽象封装，包括多种线程模型，序列化，以及“请求-响应”模式的信息交换方式。</li>
<li><strong>集群容错:</strong>提供基于接口方法的透明远程调用么，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。</li>
<li><strong>自动发现:</strong>基于注册中心目录服务，使服务消费方能动态得查找服务提供方，是地址透明，使服务提供方可以平滑增加或减少机器。</li>
</ul>
<h6 id="那么，Dubbo能做什么"><a href="#那么，Dubbo能做什么" class="headerlink" title="那么，Dubbo能做什么?"></a>那么，Dubbo能做什么?</h6><ul>
<li>透明化的远程方法调用，就想调用本地方法一样调用远程方法，只需简单配置，没有任何API侵入。</li>
<li>软负载均衡及容错机制，可以在内网替代F5等硬件负载均衡器，降低成本，减少单点。</li>
<li>服务自动注册地与发现，不需要写死服务提供方法地址，注册中心基于接口名查询服务提供的IP地址，并且能够平滑添加或删除服务提供者。</li>
</ul>
<h5 id="Dubbo产生的背景"><a href="#Dubbo产生的背景" class="headerlink" title="Dubbo产生的背景"></a>Dubbo产生的背景</h5><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需一个治理系统确保架构有条不紊的演进。</p>
<p><img src="http://dubbo.apache.org/docs/zh-cn/user/sources/images/dubbo-architecture-roadmap.jpg" alt="架构演进"> </p>
<ul>
<li>单一应用架构<ul>
<li>当网站流量很小时，只需一个应用，将所有功能都部署都在一起，以减少部署节点和成本。</li>
<li>此时，用于简化增删改查工作量的<strong>数据访问框架（ORM）</strong>是关键。</li>
</ul>
</li>
<li>垂直应用架构<ul>
<li>当访问量逐渐增大，单一应用增加机器带来的加速度越小，将应用拆分成互补想干的杰哥应用，以提升效率。</li>
<li>此时，用于加速前端页面开发的<strong>Web框架(MVC)</strong>是关键。</li>
</ul>
</li>
<li>分布式服务架构<ul>
<li>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快苏的响应多变的市场需求。</li>
<li>此时，用于提供业务复用一整合的<strong>分布式服务框架(RPC)</strong>是关键</li>
</ul>
</li>
<li>流动计算架构<ul>
<li>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。</li>
<li>此时，用于提高机器利用率的<strong>资源调度和治理中心(SOA)</strong>是关键</li>
</ul>
</li>
</ul>
<h5 id="Dubbo可以满足的需求"><a href="#Dubbo可以满足的需求" class="headerlink" title="Dubbo可以满足的需求"></a>Dubbo可以满足的需求</h5><p><img src="http://dubbo.apache.org/docs/zh-cn/user/sources/images/dubbo-service-governance.jpg" alt="服务分层"> </p>
<p>在大规模服务化之前，应用可能只是通过RMI或Hessian等工具，简单的暴露和引用远程服务，通过配置服务的URL地址进行调用，通过F5等硬件进行负载均衡。</p>
<p><strong>(1)当服务越来越多时，服务URL配置管理变得非常困难，F5硬件负载均衡器单点压力也越来越大。</strong></p>
<p>​    此时需要一个服务注册中心，动态的注册和发现服务，是服务的位置透明。</p>
<p>   并通过在消费方获取服务提供方地址列表，实现软负载均衡和Failover，降低对F5硬件负载均衡器的依赖，也减少部分成本。</p>
<p><strong>(2)当进一步发展,服务间依赖关系变得错综复杂，甚至分不清哪个应用之前启动，架构师都不能完整的描述应用的架构关系。</strong></p>
<p>这时，需要自动画出应用间的依赖关系图，一帮助架构师清理关系。</p>
<p><strong>（3）接着，服务的调用量越来越大，服务的容量问题就暴露出来了，这个服务需要多少台机器？什么时候改加机器？</strong></p>
<p>为了解决这些问题，第一步，要将服务现在每天的调用量，响应时间，都统计处理，作为容量规划的参考指标。其次，要可以动态调整权重，在线上，蒋某太机器的权重一直加大，并在加大的过程中记录响应时间的变化，知道响应时间到达阈值，记录此时的访问量，再以此访问量乘以机器数反推总容量。</p>
]]></content>
      <categories>
        <category>Dubbo</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Dubbo</tag>
        <tag>RPC</tag>
        <tag>SOA</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
</search>
